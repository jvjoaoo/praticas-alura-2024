Comandos Git

- git status: verificar quais arquivos foram modificados 
- git add: adicionar as mudanças do projeto (variações: git add . ou git add --all)
- git commit: registrar as mudanças no repositório
- git push: subir as mudanças para o repositório
- git pull: baixar as mudanças para o repositório local

- git revert: Utilizado para desfazer um commit passo a passo a baixo:
   1. Primeiro passo: verificar nosso histórico de commits através do git log
   2. Segundo passo: Depois de localizar o commit que precisa ser desfeito, copiamos a ID dele que fica na parte superior do commit destacado em amarelo (Obs, no VSCode está em amarelo)
   3. Terceiro passo: aplicamos o comando git revert e em seguida colamos o ID do commit que foi selecionado.
   4. Quarto e último passo: sincronizamos o git com o comando git push origin main

Quando estamos trabalhando em um projeto utilizando o versionamento Git e a IDE VSCode, ao adicionar ou alterar algum arquivo aparece uma sinalização ao lado do nome desses arquivos no VSCode.

Mas o que isso significa?

M: A letra M representa o estado Modified, do português modificado. Isso significa que o arquivo já existia no repositório, mas que recebeu alguma modificação que ainda não foi registrada no Git.

U: A letra U representa o estado Untracked, do português não rastreado. Isso significa que o arquivo ainda não existia no repositório e que ainda não teve seu registro (commit) feito no Git.

Essa sinalização nos ajuda a entender o estado atual dos nossos arquivos do projeto no versionamento Git.



--- commits -----> git commit -m "Anotações para estudo"

Orientações para mensagens de commits:

Mantenha a mensagem curta e concisa: A primeira linha da mensagem deve conter, no máximo, 72 caracteres. Caso seja necessário uma descrição adicional, você deve pular uma linha e adicionar os detalhes, como o contexto, da mudança realizada.

Uso de verbo no infinitivo: É comum que a mensagem do commit inicie com um verbo no infinitivo que descreva a alteração feita, como “adicionar”, “corrigir” ou “atualizar”. Em sequência, são adicionados detalhes concisos da mudança.
Por exemplo: “Atualizar texto do título da página”.

Evite detalhes técnicos: Não inclua detalhes técnicos complexos na mensagem de commit. Esses detalhes podem ser adicionados nos comentários de código ou na documentação.

Um commit deve ser realizado sempre que você finalizar uma tarefa específica ou resolver algum bug. Isso mantém o histórico de commits claro e rastreável, de modo que seja possível entender o que foi feito em cada commit.

Assim, é importante realizar commits frequentemente. Porém, evite realizar commits muito pequenos ou muito grandes, pois isso pode tornar difícil o seu entendimento.

Lembre-se de nunca realizar um commit de um código que você sabe que contém bugs. O ideal é que o commit contenha somente código funcional.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Dúvidas no decorrer das aulas: 

Qual a diferença entre "git add --all" e "git ."

Resposta gerada pela LURI (IA Alura):
O comando git add --all e git add . são muito parecidos, mas possuem uma pequena diferença. Ambos servem para adicionar todos os arquivos modificados no seu repositório local para o staging area, que é como um "ponto de espera" antes de serem efetivamente adicionados 
ao histórico do Git.

git add --all adiciona todos os arquivos modificados, inclusive os novos, ao staging area.

git add . adiciona todos os arquivos modificados e os novos arquivos que estão no diretório atual, ou seja, no diretório onde você está trabalhando.

Exemplo:

Imagine que você está trabalhando em um projeto com os seguintes arquivos:

app.js
styles.css
index.html
Você fez algumas alterações em app.js e criou um novo arquivo chamado script.js.

Se você usar git add --all, todos os arquivos, incluindo script.js, serão adicionados ao staging area.

Se você usar git add ., apenas app.js e script.js serão adicionados, pois estão no diretório atual.
